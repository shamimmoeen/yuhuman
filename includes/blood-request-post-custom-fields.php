<?php

/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 *
 * Retrieving the values:
 * Patient Name = get_post_meta( get_the_ID(), 'patient-name', true )
 * Patient Blood Group = get_post_meta( get_the_ID(), 'patient-blood-group', true )
 * When Need Blood = get_post_meta( get_the_ID(), 'when-need-blood', true )
 * Blood Units = get_post_meta( get_the_ID(), 'blood-units', true )
 * Mobile Number = get_post_meta( get_the_ID(), 'mobile-number', true )
 * Hospital Name = get_post_meta( get_the_ID(), 'hospital-name', true )
 * Location = get_post_meta( get_the_ID(), 'location', true )
 * Details = get_post_meta( get_the_ID(), 'details', true )
 */
class Yuhuman_Blood_Request_Post_Custom_Fields {
	private $config = '{"title":"Blood Request Information","prefix":"yuhuman_","domain":"yuhuman","class_name":"Yuhuman_Blood_Request_Post_Custom_Fields","post-type":["blood-request"],"context":"normal","priority":"default","cpt":"blood-request","fields":[{"type":"text","label":"Patient Name","id":"patient-name"},{"type":"select","label":"Patient Blood Group","id":"patient-blood-group"},{"type":"text","label":"When Need Blood","id":"when-need-blood"},{"type":"select","label":"Blood Units","id":"blood-units"},{"type":"tel","label":"Mobile Number","id":"mobile-number"},{"type":"text","label":"Hospital Name","id":"hospital-name"},{"type":"text","label":"Location","id":"location"},{"type":"textarea","label":"Details","rows":"3","id":"details"}]}';

	public function __construct() {
		$this->config = json_decode( $this->config, true );
		$this->process_cpts();
		add_action( 'add_meta_boxes', [ $this, 'add_meta_boxes' ] );
		add_action( 'save_post', [ $this, 'save_post' ] );
	}

	public function process_cpts() {
		if ( ! empty( $this->config['cpt'] ) ) {
			if ( empty( $this->config['post-type'] ) ) {
				$this->config['post-type'] = [];
			}
			$parts                     = explode( ',', $this->config['cpt'] );
			$parts                     = array_map( 'trim', $parts );
			$this->config['post-type'] = array_merge( $this->config['post-type'], $parts );
		}
	}

	public function add_meta_boxes() {
		foreach ( $this->config['post-type'] as $screen ) {
			add_meta_box(
				sanitize_title( $this->config['title'] ),
				$this->config['title'],
				[ $this, 'add_meta_box_callback' ],
				$screen,
				$this->config['context'],
				$this->config['priority']
			);
		}
	}

	public function save_post( $post_id ) {
		foreach ( $this->config['fields'] as $field ) {
			switch ( $field['type'] ) {
				default:
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
			}
		}
	}

	public function add_meta_box_callback() {
		$this->fields_table();
	}

	private function fields_table() {
		?>
		<table class="form-table" role="presentation">
		<tbody><?php
			foreach ( $this->config['fields'] as $field ) {
				?>
				<tr>
				<th scope="row"><?php $this->label( $field ); ?></th>
				<td><?php $this->field( $field ); ?></td>
				</tr><?php
			}
			?></tbody>
		</table><?php
	}

	private function label( $field ) {
		switch ( $field['type'] ) {
			default:
				printf(
					'<label class="" for="%s">%s</label>',
					$field['id'], $field['label']
				);
		}
	}

	private function field( $field ) {
		switch ( $field['type'] ) {
			case 'number':
				$this->input_minmax( $field );
				break;
			case 'select':
				$this->select( $field );
				break;
			case 'textarea':
				$this->textarea( $field );
				break;
			default:
				$this->input( $field );
		}
	}

	private function input_minmax( $field ) {
		printf(
			'<input class="regular-text" id="%s" %s %s name="%s" %s type="%s" value="%s">',
			$field['id'],
			isset( $field['max'] ) ? "max='{$field['max']}'" : '',
			isset( $field['min'] ) ? "min='{$field['min']}'" : '',
			$field['id'],
			isset( $field['step'] ) ? "step='{$field['step']}'" : '',
			$field['type'],
			$this->value( $field )
		);
	}

	private function value( $field ) {
		global $post;
		if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
			$value = get_post_meta( $post->ID, $field['id'], true );
		} else if ( isset( $field['default'] ) ) {
			$value = $field['default'];
		} else {
			return '';
		}

		return str_replace( '\u0027', "'", $value );
	}

	private function select( $field ) {
		printf(
			'<select id="%s" name="%s">%s</select>',
			$field['id'], $field['id'],
			$this->select_options( $field )
		);
	}

	private function select_options( $field ) {
		$output  = [];
		$options = $field['options'] ?? array();
		$options = $options ? explode( "\r\n", $options ) : array();
		$i       = 0;

		if ( 'patient-blood-group' === $field['id'] ) {
			$blood_types = yuhuman_available_blood_types();

			foreach ( $blood_types as $blood_type ) {
				if ( ! $blood_type ) {
					continue;
				}

				$options[] = $blood_type . ':' . $blood_type;
			}
		}

		if ( 'blood-units' === $field['id'] ) {
			$blood_units = yuhuman_available_blood_units();

			foreach ( $blood_units as $blood_unit ) {
				if ( ! $blood_unit ) {
					continue;
				}

				$options[] = $blood_unit . ':' . $blood_unit;
			}
		}

		foreach ( $options as $option ) {
			$pair     = explode( ':', $option );
			$pair     = array_map( 'trim', $pair );
			$output[] = sprintf(
				'<option %s value="%s"> %s</option>',
				$this->select_selected( $field, $pair[0] ),
				$pair[0], $pair[1]
			);
			$i ++;
		}

		return implode( '<br>', $output );
	}

	private function select_selected( $field, $current ) {
		$value = $this->value( $field );
		if ( $value === $current ) {
			return 'selected';
		}

		return '';
	}

	private function textarea( $field ) {
		printf(
			'<textarea class="regular-text" id="%s" name="%s" rows="%d">%s</textarea>',
			$field['id'], $field['id'],
			isset( $field['rows'] ) ? $field['rows'] : 5,
			$this->value( $field )
		);
	}

	private function input( $field ) {
		printf(
			'<input class="regular-text %s" id="%s" name="%s" %s type="%s" value="%s">',
			isset( $field['class'] ) ? $field['class'] : '',
			$field['id'], $field['id'],
			isset( $field['pattern'] ) ? "pattern='{$field['pattern']}'" : '',
			$field['type'],
			$this->value( $field )
		);
	}

}

new Yuhuman_Blood_Request_Post_Custom_Fields;
